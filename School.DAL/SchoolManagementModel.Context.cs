//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace School.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolManagementEntities : DbContext
    {
        public SchoolManagementEntities()
            : base("name=SchoolManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblSection> tblSections { get; set; }
        public virtual DbSet<tblSuggestion> tblSuggestions { get; set; }
        public virtual DbSet<tblThought> tblThoughts { get; set; }
        public virtual DbSet<tblEvent> tblEvents { get; set; }
        public virtual DbSet<tblSchool> tblSchools { get; set; }
        public virtual DbSet<tblAdmissionFee> tblAdmissionFees { get; set; }
        public virtual DbSet<tblClass> tblClasses { get; set; }
        public virtual DbSet<tblBusChargesMaster> tblBusChargesMasters { get; set; }
        public virtual DbSet<tblAdmission> tblAdmissions { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblEnquiryDetail> tblEnquiryDetails { get; set; }
        public virtual DbSet<tblSectionAllocation> tblSectionAllocations { get; set; }
        public virtual DbSet<tblUserLogin> tblUserLogins { get; set; }
        public virtual DbSet<tblUserTypeMaster> tblUserTypeMasters { get; set; }
        public virtual DbSet<tblSession> tblSessions { get; set; }
        public virtual DbSet<tblClassFeeDetail> tblClassFeeDetails { get; set; }
        public virtual DbSet<tblFeeCollection> tblFeeCollections { get; set; }
        public virtual DbSet<tblFeeMaster> tblFeeMasters { get; set; }
        public virtual DbSet<tblPromoteToClass> tblPromoteToClasses { get; set; }
        public virtual DbSet<tblAttendance> tblAttendances { get; set; }
    
        public virtual ObjectResult<USP_BindEnquiryReport_Result> USP_BindEnquiryReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sessionId, Nullable<int> classId, Nullable<int> sectionId, string enquiryStatus, string studentName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var enquiryStatusParameter = enquiryStatus != null ?
                new ObjectParameter("EnquiryStatus", enquiryStatus) :
                new ObjectParameter("EnquiryStatus", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_BindEnquiryReport_Result>("USP_BindEnquiryReport", fromDateParameter, toDateParameter, sessionIdParameter, classIdParameter, sectionIdParameter, enquiryStatusParameter, studentNameParameter);
        }
    
        public virtual ObjectResult<USP_BindAdmissionReport_Result> USP_BindAdmissionReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sessionId, Nullable<int> classId, Nullable<int> sectionId, string enquiryStatus, string studentName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var enquiryStatusParameter = enquiryStatus != null ?
                new ObjectParameter("EnquiryStatus", enquiryStatus) :
                new ObjectParameter("EnquiryStatus", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_BindAdmissionReport_Result>("USP_BindAdmissionReport", fromDateParameter, toDateParameter, sessionIdParameter, classIdParameter, sectionIdParameter, enquiryStatusParameter, studentNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TotalStudentInSection(Nullable<int> sessionId, Nullable<int> classId, Nullable<int> sectionId, string studentName)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TotalStudentInSection", sessionIdParameter, classIdParameter, sectionIdParameter, studentNameParameter);
        }
    
        [DbFunction("SchoolManagementEntities", "RptSplitCommaValues")]
        public virtual IQueryable<string> RptSplitCommaValues(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[SchoolManagementEntities].[RptSplitCommaValues](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<USP_GetSchoolEnquiryAdmissionCount_Result> USP_GetSchoolEnquiryAdmissionCount(Nullable<int> sessionId, Nullable<int> classId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetSchoolEnquiryAdmissionCount_Result>("USP_GetSchoolEnquiryAdmissionCount", sessionIdParameter, classIdParameter);
        }
    
        public virtual ObjectResult<USP_EnquiryAdmissionCountClassWise_Result> USP_EnquiryAdmissionCountClassWise(string sessionId)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_EnquiryAdmissionCountClassWise_Result>("USP_EnquiryAdmissionCountClassWise", sessionIdParameter);
        }
    
        public virtual ObjectResult<GetEnquiryIdFromAdmissionId_Result> GetEnquiryIdFromAdmissionId(Nullable<int> admissionId)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEnquiryIdFromAdmissionId_Result>("GetEnquiryIdFromAdmissionId", admissionIdParameter);
        }
    
        public virtual ObjectResult<USP_GetFeeCollectionDetail_Result> USP_GetFeeCollectionDetail(Nullable<int> admissionID, Nullable<int> classID, Nullable<int> sectionID)
        {
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFeeCollectionDetail_Result>("USP_GetFeeCollectionDetail", admissionIDParameter, classIDParameter, sectionIDParameter);
        }
    
        public virtual int insert_fees_collection(Nullable<int> enquiry_id, Nullable<int> admission_id, Nullable<int> class_id, Nullable<int> section_id, Nullable<System.DateTime> pay_date, string onaccountof, Nullable<decimal> amtpaid, string pay_mode, Nullable<int> bal_due, string feeIncharge, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var enquiry_idParameter = enquiry_id.HasValue ?
                new ObjectParameter("enquiry_id", enquiry_id) :
                new ObjectParameter("enquiry_id", typeof(int));
    
            var admission_idParameter = admission_id.HasValue ?
                new ObjectParameter("admission_id", admission_id) :
                new ObjectParameter("admission_id", typeof(int));
    
            var class_idParameter = class_id.HasValue ?
                new ObjectParameter("class_id", class_id) :
                new ObjectParameter("class_id", typeof(int));
    
            var section_idParameter = section_id.HasValue ?
                new ObjectParameter("section_id", section_id) :
                new ObjectParameter("section_id", typeof(int));
    
            var pay_dateParameter = pay_date.HasValue ?
                new ObjectParameter("pay_date", pay_date) :
                new ObjectParameter("pay_date", typeof(System.DateTime));
    
            var onaccountofParameter = onaccountof != null ?
                new ObjectParameter("onaccountof", onaccountof) :
                new ObjectParameter("onaccountof", typeof(string));
    
            var amtpaidParameter = amtpaid.HasValue ?
                new ObjectParameter("amtpaid", amtpaid) :
                new ObjectParameter("amtpaid", typeof(decimal));
    
            var pay_modeParameter = pay_mode != null ?
                new ObjectParameter("pay_mode", pay_mode) :
                new ObjectParameter("pay_mode", typeof(string));
    
            var bal_dueParameter = bal_due.HasValue ?
                new ObjectParameter("bal_due", bal_due) :
                new ObjectParameter("bal_due", typeof(int));
    
            var feeInchargeParameter = feeIncharge != null ?
                new ObjectParameter("FeeIncharge", feeIncharge) :
                new ObjectParameter("FeeIncharge", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_fees_collection", enquiry_idParameter, admission_idParameter, class_idParameter, section_idParameter, pay_dateParameter, onaccountofParameter, amtpaidParameter, pay_modeParameter, bal_dueParameter, feeInchargeParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int update_fees_collection(Nullable<int> recieptno, Nullable<int> enquiry_id, Nullable<int> admission_id, Nullable<int> class_id, Nullable<int> section_id, Nullable<System.DateTime> pay_date, string onaccountof, Nullable<decimal> amtpaid, string pay_mode, Nullable<int> bal_due, string feeIncharge)
        {
            var recieptnoParameter = recieptno.HasValue ?
                new ObjectParameter("recieptno", recieptno) :
                new ObjectParameter("recieptno", typeof(int));
    
            var enquiry_idParameter = enquiry_id.HasValue ?
                new ObjectParameter("enquiry_id", enquiry_id) :
                new ObjectParameter("enquiry_id", typeof(int));
    
            var admission_idParameter = admission_id.HasValue ?
                new ObjectParameter("admission_id", admission_id) :
                new ObjectParameter("admission_id", typeof(int));
    
            var class_idParameter = class_id.HasValue ?
                new ObjectParameter("class_id", class_id) :
                new ObjectParameter("class_id", typeof(int));
    
            var section_idParameter = section_id.HasValue ?
                new ObjectParameter("section_id", section_id) :
                new ObjectParameter("section_id", typeof(int));
    
            var pay_dateParameter = pay_date.HasValue ?
                new ObjectParameter("pay_date", pay_date) :
                new ObjectParameter("pay_date", typeof(System.DateTime));
    
            var onaccountofParameter = onaccountof != null ?
                new ObjectParameter("onaccountof", onaccountof) :
                new ObjectParameter("onaccountof", typeof(string));
    
            var amtpaidParameter = amtpaid.HasValue ?
                new ObjectParameter("amtpaid", amtpaid) :
                new ObjectParameter("amtpaid", typeof(decimal));
    
            var pay_modeParameter = pay_mode != null ?
                new ObjectParameter("pay_mode", pay_mode) :
                new ObjectParameter("pay_mode", typeof(string));
    
            var bal_dueParameter = bal_due.HasValue ?
                new ObjectParameter("bal_due", bal_due) :
                new ObjectParameter("bal_due", typeof(int));
    
            var feeInchargeParameter = feeIncharge != null ?
                new ObjectParameter("FeeIncharge", feeIncharge) :
                new ObjectParameter("FeeIncharge", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_fees_collection", recieptnoParameter, enquiry_idParameter, admission_idParameter, class_idParameter, section_idParameter, pay_dateParameter, onaccountofParameter, amtpaidParameter, pay_modeParameter, bal_dueParameter, feeInchargeParameter);
        }
    
        public virtual int Delete_Fee_Collection(Nullable<int> feeCollectionId, Nullable<int> modifiedBy)
        {
            var feeCollectionIdParameter = feeCollectionId.HasValue ?
                new ObjectParameter("FeeCollectionId", feeCollectionId) :
                new ObjectParameter("FeeCollectionId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Fee_Collection", feeCollectionIdParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<USP_FeeCollectionReceipt_Result> USP_FeeCollectionReceipt(Nullable<int> feeCollectionId, Nullable<int> admissionId)
        {
            var feeCollectionIdParameter = feeCollectionId.HasValue ?
                new ObjectParameter("FeeCollectionId", feeCollectionId) :
                new ObjectParameter("FeeCollectionId", typeof(int));
    
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FeeCollectionReceipt_Result>("USP_FeeCollectionReceipt", feeCollectionIdParameter, admissionIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAttendanceDetail_Result> USP_GetAttendanceDetail(Nullable<int> sectionId, Nullable<System.DateTime> attendanceDate)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAttendanceDetail_Result>("USP_GetAttendanceDetail", sectionIdParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<USP_NewAttendanceDetails_Result> USP_NewAttendanceDetails(Nullable<int> sectionId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_NewAttendanceDetails_Result>("USP_NewAttendanceDetails", sectionIdParameter);
        }
    
        public virtual ObjectResult<USP_BindStudentWithClassAndSection_Result> USP_BindStudentWithClassAndSection(Nullable<int> sessionId, Nullable<int> classId, Nullable<int> sectionId, string studentName)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_BindStudentWithClassAndSection_Result>("USP_BindStudentWithClassAndSection", sessionIdParameter, classIdParameter, sectionIdParameter, studentNameParameter);
        }
    }
}
